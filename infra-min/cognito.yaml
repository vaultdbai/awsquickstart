AWSTemplateFormatVersion: '2010-09-09'
Description: VaultDB Users Stack
Parameters:
  ApplicationName:
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]{0,48}[a-z0-9]$"
    Description: Enter the name of your application with no spaces.

Metadata:
  Author: VaultDB.ai
  Url: https://vaultdb.ai

Resources:
  # Creates a user pool in cognito for your app to auth against
  # Other fields can be added to the schema
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Join ['', ['Vaultdb', '-user-pool-', !Ref ApplicationName]]
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
  
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    DependsOn: UserPool
    Properties:
      ClientName: !Join ['', ['Vaultdb', '-client', !Ref ApplicationName]]
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    DependsOn: UserPoolClient
    Properties:
      IdentityPoolName: !Join ['', ['Vaultdb', '-Identity-', !Ref ApplicationName]]
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['', ['vaultdb', '-CognitoUnAuthorizedRole-', !Ref ApplicationName]]
      Tags:
        - Key: Purpose
          Value: 'VaultDB'    
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Join ['', ['vaultdb', '-CognitoUnauthorizedPolicy-', !Ref ApplicationName]]
          PolicyDocument: 
            Version: "2012-10-17"
            Tags:
              - Key: Purpose
                Value: 'VaultDB'    
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['', ['vaultdb', '-CognitoAuthorizedRole-', !Ref ApplicationName]]
      Tags:
        - Key: Purpose
          Value: 'VaultDB'    
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Join ['', ['vaultdb', '-CognitoAdminAuthorizedPolicy-', !Ref ApplicationName]]
          PolicyDocument: 
            Version: "2012-10-17"
            Tags:
              - Key: Purpose
                Value: 'VaultDB'    
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  # Assigns the roles to the Identity Pool
  IdentityUserPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  VaultDBAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['', ['vaultdb', '-AdminRole-', !Ref ApplicationName]]
      Tags:
        - Key: Purpose
          Value: 'VaultDB'    
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated

  VaultDBUserRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['', ['vaultdb', '-UserRole-', !Ref ApplicationName]]
      Tags:
        - Key: Purpose
          Value: 'VaultDB'    
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated

  VaultDBUserRolePolicies:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join ['', ['vaultdb', '-EndUserRolePolicies-', !Ref ApplicationName]]
      Roles:
        - !Ref VaultDBAdminRole
        - !Ref VaultDBUserRole
      PolicyDocument:
        Version: "2012-10-17"
        Tags:
          - Key: Purpose
            Value: 'VaultDB'    
        Statement:       
          - Effect: "Allow"
            Action:
              - "mobileanalytics:PutEvents"
              - "cognito-sync:*"
              - "cognito-identity:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
            Resource: "*"

  QueryUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: UserPool
    Properties: 
      Description: "VaultDB ReadOnly Users"
      GroupName: !Join ['', ['vaultdb', '-ReadOnlyUsers-', !Ref ApplicationName]]
      Precedence: 1
      RoleArn: !GetAtt VaultDBUserRole.Arn
      UserPoolId: !Ref UserPool

  AdminUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: UserPool
    Properties: 
      Description: "VaultDB Administrators"
      GroupName: !Join ['', ['vaultdb', '-Administrators-', !Ref ApplicationName]]
      Precedence: 10
      RoleArn: !GetAtt VaultDBAdminRole.Arn
      UserPoolId: !Ref UserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: 'vaultdb'
      UserPoolId: !Ref UserPool
      UserAttributes:
        - Name: name
          Value: 'vaultdb'
        - Name: email
          Value: 'admin@changethisemailaddress.xyz'

  QueryUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: 'demo'
      UserPoolId: !Ref UserPool
      UserAttributes:
        - Name: name
          Value: 'demo'
        - Name: email
          Value: 'demo@changethisemailaddress.xyz'

  AdminUserAssignment:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties: 
      GroupName: !Ref AdminUserPoolGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref UserPool

  ReadOnlyUserAssignment:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties: 
      GroupName: !Ref QueryUserPoolGroup
      Username: !Ref QueryUser
      UserPoolId: !Ref UserPool

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${ApplicationName}-UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${ApplicationName}-UserPoolClient
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: !Sub ${ApplicationName}-IdentityPool
  VaultDBAdmin:
    Value: !Ref AdminUser
    Export:
      Name: !Sub ${ApplicationName}-VaultDBAdmin
  VaultDBReadOnlyUser:
    Value: !Ref QueryUser
    Export:
      Name: !Sub ${ApplicationName}-VaultDBReadOnlyUser
  CognitoUnAuthorizedRole:
    Value: !Ref CognitoUnAuthorizedRole
    Export:
      Name: !Sub ${ApplicationName}-CognitoUnAuthorizedRole
  CognitoAuthorizedRole:
    Value: !Ref CognitoAuthorizedRole
    Export:
      Name: !Sub ${ApplicationName}-CognitoAuthorizedRole
