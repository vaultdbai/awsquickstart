AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Nested stack
Metadata:
  Author: VaultDB.ai
  Url: https://vaultdb.ai
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Networking Configuration"
        Parameters: 
          - ApplicationName
          - PrimarySubnetAZ
          - PrivateSubnetCIDR

    ParameterLabels:
      PrimarySubnetAZ: 
        default: "What is your Primary Region?"

Parameters:
  ApplicationName:
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]{0,48}[a-z0-9]$"
    Description: Enter the name of your application with no spaces.
  PrimarySubnetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    AllowedPattern: ".+"
    Description: Enter the primary availability zone for your subnet.
  PrivateSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    # Default: 10.0.20.0/24
    Description: VPC CIDR Block for the Private Subnet (eg 10.0.20.0/24)
    Type: String    

Rules:
  PrimarySubnetIsRequired:
    Assertions:
      - AssertDescription: Primary Subnet is required
        Assert: !Not [!Equals [!Ref PrimarySubnetAZ, AWS::NoValue]]
      - AssertDescription: Primary Subnet is cannot be empty
        Assert: !Not [!Equals [!Ref PrimarySubnetAZ, '']]
      - AssertDescription: Private Subnet CIDR is required
        Assert: !Not [!Equals [!Ref PrivateSubnetCIDR, '']]

Resources:
  VPCPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Fn::ImportValue: !Sub '${ApplicationName}-VPC'
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref PrimarySubnetAZ
      Tags:
        - Key: Purpose
          Value: 'VaultDB'
        - Key: Name
          Value: !Join
            - ''
            - - !Ref ApplicationName
              - '-vaultdb-private-subnet'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Fn::ImportValue: !Sub '${ApplicationName}-VPC'
      Tags:
        - Key: Purpose
          Value: 'VaultDB'
        - Key: Name
          Value: !Join
            - ''
            - - !Ref ApplicationName
              - '-vaultdb-vpc-Private-Routes'

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnetA

  DataSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: "security group for the prod EFS"
          GroupName: !Join ['', ['vaultdb', '-data-securitygroup-', !Ref ApplicationName]]
          VpcId:
            Fn::ImportValue: !Sub '${ApplicationName}-VPC'
          Tags:
            - 
              Key: Environment
              Value: !Ref ApplicationName
            - 
              Key: Name
              Value: !Join ['', ['vaultdb', '-data-securitygroup-', !Ref ApplicationName]]
            - 
              Key: Project
              Value: !Ref ApplicationName
            - 
              Key: createdBy
              Value: vaultdb.ai

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource: '*'
      VpcId: 
        Fn::ImportValue: !Sub "${ApplicationName}-VPC"
      RouteTableIds:
        - !Ref PrivateRouteTable

  EFSInterfaceEndpoint:
      Type: 'AWS::EC2::VPCEndpoint'
      Properties:
          VpcEndpointType: Interface
          ServiceName: !Sub 'com.amazonaws.${AWS::Region}.elasticfilesystem'
          VpcId:
            Fn::ImportValue: !Sub '${ApplicationName}-VPC'
          SubnetIds: 
            - !Ref VPCPrivateSubnetA
          SecurityGroupIds:
            - !Ref DataSecurityGroup

Outputs:
  PrivateSubnet:
    Value: !Ref VPCPrivateSubnetA
    Export:
      Name: !Sub ${ApplicationName}-VPCPrivateSubnet
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${ApplicationName}-PrivateRouteTable
  DataSecurityGroup:
    Value: !Ref DataSecurityGroup
    Export:
      Name: !Sub ${ApplicationName}-DataSecurityGroup
