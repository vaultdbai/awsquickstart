AWSTemplateFormatVersion: 2010-09-09
Description: VaultDB Lambda function to execute Queries
Metadata:
  Author: VaultDB.ai
  Url: https://www.vaultdb.ai

Parameters:
  ApplicationName:
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]{0,48}[a-z0-9]$"
    Description: Enter the name of your application with no spaces.

  MergeTimeout:
    Type: Number
    Default: 900
    Description: Enter the merge lambda timeout in seconds.

  MemoryLimit:
    Type: Number
    Default: 2048

  AutoMergeScheduleExpression:
    Type: String
    Default: "cron(0 17 * * ? *)" 
    Description: Enter the Merge lambda automatic run Schedule Expression. Default Runs every day at 5 PM UTC

Resources:
  MergeDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Purpose
          Value: "VaultDB"
        - Key: Project
          Value: !Ref ApplicationName
        - Key: createdBy
          Value: vaultdb.ai
      Description: Merge Data into VaultDB Hub
      FunctionName: !Join ["", [!Ref ApplicationName, "-merge-data"]]
      Role:
        Fn::ImportValue: !Sub "${ApplicationName}-ExecuteRole"
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/vaultdb:lambda"
      PackageType: Image
      ImageConfig:
        Command: 
          - merge.lambda_handler
      Architectures:
        - x86_64
      MemorySize: !Ref MemoryLimit
      Timeout: !Ref MergeTimeout
      Environment:
        Variables:
          application_name: !Sub "${ApplicationName}"
          TIMEOUT_SECONDS: !Ref MergeTimeout
          AWS_STS_REGIONAL_ENDPOINTS: "regional"
          commitlog_directory: "/mnt/commitlog"
          memory_limit: !Ref MemoryLimit
          HOME: "/mnt/commitlog"
          account_id: !Sub ${AWS::AccountId}
          public_bucket:
            Fn::ImportValue: !Sub "${ApplicationName}-PublicBucket"
          data_store:
            Fn::ImportValue: !Sub "${ApplicationName}-DataBucket"
          user_pool_id:
            Fn::ImportValue: !Sub "${ApplicationName}-UserPool"
          user_pool_client_id:
            Fn::ImportValue: !Sub "${ApplicationName}-UserPoolClient"
          identity_pool_id:
            Fn::ImportValue: !Sub "${ApplicationName}-IdentityPool"
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${ApplicationName}-DataSecurityGroup"
        SubnetIds:
          - Fn::ImportValue: !Sub "${ApplicationName}-VPCPrivateSubnet"
      FileSystemConfigs:
        - Arn:
            Fn::ImportValue: !Sub "${ApplicationName}-EFSAccessPointResource"
          LocalMountPath: /mnt/commitlog

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MergeDataFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: 
        Fn::ImportValue: !Sub "${ApplicationName}-PublicBucket-arn"

  ScheduleMergedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Scheduled data merge Runs"
      ScheduleExpression: !Ref AutoMergeScheduleExpression
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt MergeDataFunction.Arn
          Id: "UpdateKeysWeekly"
          Input: '{"RequestType":  "ForceMerge"}'

  PermissionForEventsToInvokeMergeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MergeDataFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt MergeDataFunction.Arn

  InvokeDeploymentToConfigureTriggersAndUsers:
    Type: 'Custom::LambdaTrigger'
    DependsOn: 
      - S3InvokeLambdaPermission
      - ScheduleMergedRule
      - PermissionForEventsToInvokeMergeLambda
    Properties:
      ServiceToken: 
        Fn::ImportValue: !Sub "${ApplicationName}-DeploymentUtilFunction-arn"
      LambdaArn: !GetAtt MergeDataFunction.Arn

Outputs:
  MergeDataFunction:
    Description: VaultDB Data Merge Function
    Value: !Ref MergeDataFunction
    Export:
      Name: !Sub ${ApplicationName}-MergeDataFunction
  CLI:
    Description: Use this command to copy files
    Value: !Sub |
      aws lambda invoke --function-name '${ApplicationName}-merge-data' --payload '{ "Bucket": "${ApplicationName}-PublicBucket", "path": "merge_queue" }' lambda-output.txt --cli-binary-format raw-in-base64-out
