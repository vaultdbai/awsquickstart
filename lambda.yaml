AWSTemplateFormatVersion: 2010-09-09
Description: VaultDB Lambda funtion to execute Queries
Metadata:
  Author: VaultDB.ai
  Url: https://vaultdb.ai
      
Parameters:
  ApplicationName:
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]{0,48}[a-z0-9]$"
    Description: Enter the name of your application with no spaces.
    
Resources:
  ExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', ['vaultdb', '-execution-role-', !Ref ApplicationName]]
      Tags:
        - Key: Purpose
          Value: 'VaultDB'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ['', ['vaultdb', '-execution-service-policy-', !Ref ApplicationName]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:ListMultipartUploadParts
                  - s3:*Object
                  - s3:ListBucket
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'

  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: 
        Fn::ImportValue: !Sub '${ApplicationName}-EFSFileSystem'
      PosixUser:
        Uid: 1001
        Gid: 1001
      RootDirectory:
        CreationInfo:
          OwnerGid: 1001
          OwnerUid: 1001
          Permissions: 770
        Path: /commitlog

  VaultDBPythonLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      LayerName: !Join ['', ['vaultdb', '-python-linux-layer-', !Ref ApplicationName]]
      CompatibleRuntimes:
        - python3.8
      CompatibleArchitectures:
        - x86_64
      Content:
        S3Bucket:
          Fn::ImportValue: !Sub "${ApplicationName}-PublicBucket"
        S3Key: 'release/lambda-package.zip'

  ExecuteQueryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Purpose
          Value: 'VaultDB'    
      Description: Execute Vaultdb SQL Qeries
      FunctionName: !Join ['', ['vaultdb', '-execute-query-', !Ref ApplicationName]]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ExecuteRole.Arn
      Timeout: 240
      Layers:
        - !Ref VaultDBPythonLayer
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          aws_region: !Sub '${AWS::Region}'
          AWS_STS_REGIONAL_ENDPOINTS: 'regional'
          commitlog_directory: '/mnt/commitlog'
          data_store: 
            Fn::ImportValue: !Sub "${ApplicationName}-DataBucket"
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${ApplicationName}-DataSecurityGroup'
        SubnetIds:
          - Fn::ImportValue: !Sub '${ApplicationName}-VPCPrivateSubnet'
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: /mnt/commitlog
      Code:
        ZipFile: |
          import os
          import logging
          import json

          # Set up the logger
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG) # Very verbose

          aws_region = os.environ['aws_region']
          commitlog_directory = os.environ['commitlog_directory']
          data_store = os.environ['data_store']
          keys = None

          def get_keys():
              import boto3
              global keys
              if keys:
                  return keys
              s3 = boto3.resource('s3')
              obj = s3.meta.client.get_object(Bucket=data_store, Key="jwks.json")
              keys = json.loads(obj['Body'].read())['keys']
              return keys
              
          get_keys()

          def lambda_handler(event, context):
              logger.info('commitlog directory: %s', commitlog_directory)
              return get_keys()
              # return attributes(context)

          def test_efs(context):
              # Ceate file on efs
              filename = f'{commitlog_directory}/test.txt'
              if os.path.exists(filename):
                  append_write = 'a' # append if already exists
              else:
                  append_write = 'w' # make a new file if not
              highscore = open(filename, append_write)
              highscore.write("IdentityId: " + context.identity.cognito_identity_id + '\n')
              highscore.write("IdentityPoolId: " + context.identity.cognito_identity_pool_id + '\n')
              highscore.close()

          def test_s3(context):
              # Upload to s3
              import boto3
              filename = f'{commitlog_directory}/test.txt'
              s3 = boto3.resource('s3')
              s3.Bucket(data_store).upload_file(filename, f"data/test.txt")

          def attributes(obj):
              from inspect import getmembers
              from types import FunctionType
              disallowed_names = {
                name for name, value in getmembers(type(obj)) 
                  if isinstance(value, FunctionType)}
              return {
                name: attributes(getattr(obj, name)) if name=='identity' else getattr(obj, name) for name in dir(obj) 
                  if name[:2] != '__' and name not in disallowed_names and hasattr(obj, name)}


Outputs:
  ExecuteRole:
    Description: VaultDB Execution Role that works on behalf of user
    Value: !Ref ExecuteRole
    Export:
      Name: !Sub ${ApplicationName}-ExecuteRole
  CLI:
    Description: Use this command to invoke the Lambda function
    Value: !Sub |
        aws lambda invoke --function-name 'vaultdb-execute-query-${ApplicationName}' --payload 'SELECT CURRENT_CATALOG' lambda-output.txt --cli-binary-format raw-in-base64-out
        