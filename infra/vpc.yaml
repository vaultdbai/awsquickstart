AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Nested stack
Metadata:
  Author: VaultDB.ai
  Url: https://vaultdb.ai
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Networking Configuration"
        Parameters: 
          - ExistingVPC
          - PrimarySubnetAZ
          - CidrBlock
          - PublicSubnetCIDR
          - PrivateSubnetCIDR

    ParameterLabels:
      ExistingVPC: 
        default: "Do you want to use Existing VPC (Keep empty if you want to create New)?"
      PrimarySubnetAZ: 
        default: "What is your Primary Region?"

Parameters:
  PrimarySubnetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    AllowedPattern: ".+"
    Description: Enter the primary availability zone for your subnet.
  PublicSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    # Default: 10.0.10.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.10.0/24)
    Type: String
  PrivateSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    # Default: 10.0.20.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.20.0/24)
    Type: String    
  ExistingVPC:
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Please Choose existing VPC to use eixsting    
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    # Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String

Conditions:
  IsNewVPC: !Equals [!Ref ExistingVPC, '']

Rules:
  PrimarySubnetIsRequired:
    Assertions:
      - AssertDescription: Primary Subnet is required
        Assert: !Equals [!Ref PrimarySubnetAZ, '']

  RequiredForNewVPC:
    RuleCondition: !Equals [!Ref ExistingVPC, '']
    Assertions:
      - AssertDescription: CidrBlock is required
        Assert: !Equals [!Ref CidrBlock, '']
      - AssertDescription: Public Subnet CIDR is required
        Assert: !Equals [!Ref PublicSubnetCIDR, '']
      - AssertDescription: Private Subnet CIDR is required
        Assert: !Equals [!Ref PrivateSubnetCIDR, '']

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Condition: IsNewVPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref AWS::StackName, '-vaultdb', '-vpc']]

  VPCPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If
          - IsNewVPC 
          - !Ref VPC 
          - !Ref ExistingVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref PrimarySubnetAZ
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - '-vaultdb-private-subnet'

  VPCPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If
          - IsNewVPC 
          - !Ref VPC 
          - !Ref ExistingVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Ref PrimarySubnetAZ
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - '-vaultdb-public-subnet'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref AWS::StackName, '-vaultdb', '-InternetGateway']]

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !If
          - IsNewVPC 
          - !Ref VPC 
          - !Ref ExistingVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If
          - IsNewVPC 
          - !Ref VPC 
          - !Ref ExistingVPC
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - '-vaultdb-vpc-Public-Routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VPCPublicSubnetA

Outputs:
  VPC:
    Value: !If
          - IsNewVPC 
          - !Ref VPC 
          - !Ref ExistingVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  PrivateSubnetA:
    Value: !Ref VPCPrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-VPCPrivateSubnetA
  PublicSubnetA:
    Value: !Ref VPCPublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicSubnetA
