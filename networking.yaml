AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Nested stack
Metadata:
  Author: VaultDB.ai
  Url: https://www.vaultdb.ai
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Networking Configuration"
        Parameters:
          - ApplicationName
          - PrimarySubnetAZ
          - PrivateSubnetCIDR

    ParameterLabels:
      PrimarySubnetAZ:
        default: "What is your Primary Region?"

Parameters:
  ApplicationName:
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]{0,48}[a-z0-9]$"
    Description: Enter the name of your application with no spaces.
  PrimarySubnetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    AllowedPattern: ".+"
    Description: Enter the primary availability zone for your subnet.
  PrivateSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    # Default: 10.0.20.0/24
    Description: VPC CIDR Block for the Private Subnet (eg 10.0.20.0/24)
    Type: String

Rules:
  PrimarySubnetIsRequired:
    Assertions:
      - AssertDescription: Primary Subnet is required
        Assert: !Not [!Equals [!Ref PrimarySubnetAZ, AWS::NoValue]]
      - AssertDescription: Primary Subnet is cannot be empty
        Assert: !Not [!Equals [!Ref PrimarySubnetAZ, ""]]
      - AssertDescription: Private Subnet CIDR is required
        Assert: !Not [!Equals [!Ref PrivateSubnetCIDR, ""]]

Resources:
  VPCPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${ApplicationName}-VPC"
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Ref PrimarySubnetAZ
      Tags:
        - Key: Purpose
          Value: "VaultDB"
        - Key: Project
          Value: !Ref ApplicationName
        - Key: Name
          Value: !Join
            - ""
            - - "vaultdb-private-subnet-"
              - !Ref ApplicationName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${ApplicationName}-VPC"
      Tags:
        - Key: Purpose
          Value: "VaultDB"
        - Key: Project
          Value: !Ref ApplicationName
        - Key: Name
          Value: !Join
            - ""
            - - "vaultdb-vpc-Private-Routes-"
              - !Ref ApplicationName

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VPCPrivateSubnetA

  DataSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for the prod EFS"
      GroupName: !Join ["", [!Ref ApplicationName, "-data-securitygroup"]]
      VpcId:
        Fn::ImportValue: !Sub "${ApplicationName}-VPC"
      Tags:
        - Key: Purpose
          Value: "VaultDB"
        - Key: Project
          Value: !Ref ApplicationName
        - Key: createdBy
          Value: vaultdb.ai

  EFSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt DataSecurityGroup.GroupId
      GroupId: !GetAtt DataSecurityGroup.GroupId

  S3InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt DataSecurityGroup.GroupId
      GroupId: !GetAtt DataSecurityGroup.GroupId

  HttpInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt DataSecurityGroup.GroupId
      GroupId: !GetAtt DataSecurityGroup.GroupId

  PrivateGatewayEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Fn::ImportValue: !Sub "${ApplicationName}-VPC"
      RouteTableIds:
        - !Ref PrivateRouteTable

Outputs:
  PrivateSubnet:
    Value: !Ref VPCPrivateSubnetA
    Export:
      Name: !Sub ${ApplicationName}-VPCPrivateSubnet
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${ApplicationName}-PrivateRouteTable
  DataSecurityGroup:
    Value: !Ref DataSecurityGroup
    Export:
      Name: !Sub ${ApplicationName}-DataSecurityGroup
